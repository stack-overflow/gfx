#version 400
layout(location = 0) in vec3 position;
layout(location = 1) in vec3 normal;
layout(location = 2) in vec2 textureCoords;
layout(location = 3) in vec3 tangent;
layout(location = 4) in vec3 bitangent;

uniform vec3 lightPos;
uniform mat4 modelMatrix;
uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;

smooth out vec2 vVaryingTexCoords;
smooth out vec3 vVaryingLightDir;
smooth out vec3 vVaryingNormal;
smooth out vec3 tangentWorld;
smooth out vec3 bitangentWorld;

void main(void)
{
	vec4 vNormal4f = vec4(normal, 1.0f);
	vec4 vPos4f = vec4(position, 1.0f);
	vPos4f = viewMatrix * modelMatrix * vPos4f;

	vVaryingLightDir = normalize(lightPos - vPos4f.xyz); 

	gl_Position       = projectionMatrix * vPos4f;

	vVaryingNormal    = normalize(vec3(modelMatrix * vNormal4f));
	tangentWorld	  = (modelMatrix * vec4(normalize(tangent), 0.0)).xyz;
	bitangentWorld	  = (modelMatrix * vec4(normalize(bitangent), 0.0)).xyz;
	vVaryingTexCoords = textureCoords;
}
